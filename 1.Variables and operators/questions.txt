1. which is better var or let?

    ans: let is better than var because it is block-scoped, which prevents unintended access outside of loops or conditionals.
    Also, let doesn't allow redeclaration in the same scope, making code cleaner and more predictable.

    Moreover,

    ✅ 1. Scope
    var is function-scoped → visible outside the function.

    let is block-scoped → visible only within {} block.

    ✅ 2. Redeclaration
    var can be redeclared in the same scope.

    let cannot be redeclared in the same scope → prevents mistakes.

    ✅ 3. Hoisting Behavior
    var is hoisted and initialized as undefined.

    let is hoisted but not initialized → accessing before declaration causes a ReferenceError.


2. What is variable hoisting? do let support hoisting?
    Ans. let is hoisted but not initalized . gives reference ReferenceError
    let is hoisted but stays in a Temporal Dead Zone (TDZ) until the line it's declared — accessing it before that throws an error.

    demo of let:
    console.log(p);
    let p=10;

    o/p is ----app.js:114 Uncaught ReferenceError: Cannot access 'p' before initialization

    case of var:
    ---var is hoisted and automatically initialized to undefined.

    demo of var:


    console.log(k);
    var k=10;

    o/p - undefined


3.pre increment and post increment

    let age=10;
    let newage= ++age ;
    (age =11 then newage=11) (change then use)

    let age=10;
    let newage=age++;
    (mewage=10 then age=11) (use then change)


4. Identifier rules - rules to name variables

    ->All JavaScript variables must be identified with unique names (identifiers).
    Names can contain letters, digits, underscores, and dollar signs. (no space)
    Names must begin with a letter.
    Names can also begin with $ and _.
    Names are case sensitive (y and Y are different variables).
    Reserved words (like JavaScript keywords) CANNOT be used as names.

5. ways of writing identifiers

    ans: camelCase , snake_case, PascalCase


6. uniqueness of js?
    allows the developer to change the data type of variable after declaration.

7. what is typescript?
    stricter version of js where data type cannot be changed
    it is static typed, whereas js is dynamic typed
    developed by microsoft

8. what are template literals?
     allow you to work with strings in a more flexible and readable way. 
     They are enclosed by backticks (`) instead of single (') or double (") quotes.

     ex:`My name is ${name} and I am ${age} years old.`;

9.power symbol - **  
    ex: 2**3 = 8

10. == and ===
    // equal to operator compare value, not data type
    console.log(9=='9')  //true

    //to compare type and value
    console.log(8==='8') //false

11. unicodes
     Unicode is a standard for representing characters

     //syntax- \uXXXX
     const heart = '\u2665';      // ♥
    const smile = '\u263A';      // ☺

    lowercase letters > uppercse


12.logical operators - && , || , ! 

13. alert display alert message on screen (pop up)
    prompt is small dialog box asking user for input